//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcAuth.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Ecomerce2019Entities : DbContext
    {
        public Ecomerce2019Entities()
            : base("name=Ecomerce2019Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<tb_admin> tb_admin { get; set; }
        public virtual DbSet<tb_Categoria> tb_Categoria { get; set; }
        public virtual DbSet<tb_Cliente> tb_Cliente { get; set; }
        public virtual DbSet<tb_ClienteEx> tb_ClienteEx { get; set; }
        public virtual DbSet<tb_DetalleEnvio> tb_DetalleEnvio { get; set; }
        public virtual DbSet<tb_detalleOrden> tb_detalleOrden { get; set; }
        public virtual DbSet<tb_Distrito> tb_Distrito { get; set; }
        public virtual DbSet<tb_Doctor> tb_Doctor { get; set; }
        public virtual DbSet<tb_Horario> tb_Horario { get; set; }
        public virtual DbSet<tb_ListaDeseos> tb_ListaDeseos { get; set; }
        public virtual DbSet<tb_ListaDeseosExt> tb_ListaDeseosExt { get; set; }
        public virtual DbSet<tb_Orden> tb_Orden { get; set; }
        public virtual DbSet<tb_OrdenExt> tb_OrdenExt { get; set; }
        public virtual DbSet<tb_Pago> tb_Pago { get; set; }
        public virtual DbSet<tb_TipoPago> tb_TipoPago { get; set; }
        public virtual DbSet<tb_VistaReciente> tb_VistaReciente { get; set; }
    
        public virtual ObjectResult<buscarXNombre_Result> buscarXNombre(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscarXNombre_Result>("buscarXNombre", nombreParameter);
        }
    
        public virtual ObjectResult<SP_CIENTE_LOGIN_Result> SP_CIENTE_LOGIN(string sEmail, string sPassword)
        {
            var sEmailParameter = sEmail != null ?
                new ObjectParameter("sEmail", sEmail) :
                new ObjectParameter("sEmail", typeof(string));
    
            var sPasswordParameter = sPassword != null ?
                new ObjectParameter("sPassword", sPassword) :
                new ObjectParameter("sPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CIENTE_LOGIN_Result>("SP_CIENTE_LOGIN", sEmailParameter, sPasswordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_cod()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_cod");
        }
    
        public virtual ObjectResult<SP_DOCTOR_LIST_Result> SP_DOCTOR_LIST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DOCTOR_LIST_Result>("SP_DOCTOR_LIST");
        }
    
        public virtual ObjectResult<SP_DOCTOR_POR_DISTRITO_LIST_Result> SP_DOCTOR_POR_DISTRITO_LIST(Nullable<int> distrito)
        {
            var distritoParameter = distrito.HasValue ?
                new ObjectParameter("distrito", distrito) :
                new ObjectParameter("distrito", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DOCTOR_POR_DISTRITO_LIST_Result>("SP_DOCTOR_POR_DISTRITO_LIST", distritoParameter);
        }
    
        public virtual ObjectResult<sp_listaCliente_Result> sp_listaCliente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_listaCliente_Result>("sp_listaCliente");
        }
    
        public virtual ObjectResult<sp_listaDeseos_Result> sp_listaDeseos(string idCliente)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_listaDeseos_Result>("sp_listaDeseos", idClienteParameter);
        }
    
        public virtual ObjectResult<sp_listaDistrito_Result> sp_listaDistrito()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_listaDistrito_Result>("sp_listaDistrito");
        }
    
        public virtual int sp_registroCliente(string nomCliente, string apeCliente, string dniCliente, string usuario, string contraseña, Nullable<int> edad, string genero, Nullable<System.DateTime> fechaNacimiento, Nullable<int> idDistrito, string correo, string telefono, string direccion, string foto, string notas)
        {
            var nomClienteParameter = nomCliente != null ?
                new ObjectParameter("nomCliente", nomCliente) :
                new ObjectParameter("nomCliente", typeof(string));
    
            var apeClienteParameter = apeCliente != null ?
                new ObjectParameter("apeCliente", apeCliente) :
                new ObjectParameter("apeCliente", typeof(string));
    
            var dniClienteParameter = dniCliente != null ?
                new ObjectParameter("dniCliente", dniCliente) :
                new ObjectParameter("dniCliente", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("edad", edad) :
                new ObjectParameter("edad", typeof(int));
    
            var generoParameter = genero != null ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var idDistritoParameter = idDistrito.HasValue ?
                new ObjectParameter("idDistrito", idDistrito) :
                new ObjectParameter("idDistrito", typeof(int));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_registroCliente", nomClienteParameter, apeClienteParameter, dniClienteParameter, usuarioParameter, contraseñaParameter, edadParameter, generoParameter, fechaNacimientoParameter, idDistritoParameter, correoParameter, telefonoParameter, direccionParameter, fotoParameter, notasParameter);
        }
    
        public virtual int sp_registroDeseo(Nullable<int> idCliente, Nullable<int> idDoctor)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idDoctorParameter = idDoctor.HasValue ?
                new ObjectParameter("idDoctor", idDoctor) :
                new ObjectParameter("idDoctor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_registroDeseo", idClienteParameter, idDoctorParameter);
        }
    
        public virtual int sp_registroDoctor(string nomDoctor, string dniDoctor, string cmpDoctor, Nullable<int> idCategoria, Nullable<int> id_Horario, string dirDoctor, Nullable<int> idDistrito, string telDoctor, string emailDoctor, Nullable<decimal> precio, Nullable<decimal> precioAnterior, string imageURL, string textoAlternativo, string caracteristica1, string caracteristica2, string caracteristica3, string caracteristica4, string caracteristica5, Nullable<bool> placa, string tituloOferta, string claseDistintaOferta, string descripcionCorta, string descripcionLarga, string nota, Nullable<bool> agregarCarro, string caracteristica6, string caracteristica7, string caracteristica8, string porc1, string porc2, string porc3, string porc4, string idUser)
        {
            var nomDoctorParameter = nomDoctor != null ?
                new ObjectParameter("nomDoctor", nomDoctor) :
                new ObjectParameter("nomDoctor", typeof(string));
    
            var dniDoctorParameter = dniDoctor != null ?
                new ObjectParameter("dniDoctor", dniDoctor) :
                new ObjectParameter("dniDoctor", typeof(string));
    
            var cmpDoctorParameter = cmpDoctor != null ?
                new ObjectParameter("cmpDoctor", cmpDoctor) :
                new ObjectParameter("cmpDoctor", typeof(string));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var id_HorarioParameter = id_Horario.HasValue ?
                new ObjectParameter("id_Horario", id_Horario) :
                new ObjectParameter("id_Horario", typeof(int));
    
            var dirDoctorParameter = dirDoctor != null ?
                new ObjectParameter("dirDoctor", dirDoctor) :
                new ObjectParameter("dirDoctor", typeof(string));
    
            var idDistritoParameter = idDistrito.HasValue ?
                new ObjectParameter("idDistrito", idDistrito) :
                new ObjectParameter("idDistrito", typeof(int));
    
            var telDoctorParameter = telDoctor != null ?
                new ObjectParameter("telDoctor", telDoctor) :
                new ObjectParameter("telDoctor", typeof(string));
    
            var emailDoctorParameter = emailDoctor != null ?
                new ObjectParameter("emailDoctor", emailDoctor) :
                new ObjectParameter("emailDoctor", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var precioAnteriorParameter = precioAnterior.HasValue ?
                new ObjectParameter("PrecioAnterior", precioAnterior) :
                new ObjectParameter("PrecioAnterior", typeof(decimal));
    
            var imageURLParameter = imageURL != null ?
                new ObjectParameter("ImageURL", imageURL) :
                new ObjectParameter("ImageURL", typeof(string));
    
            var textoAlternativoParameter = textoAlternativo != null ?
                new ObjectParameter("TextoAlternativo", textoAlternativo) :
                new ObjectParameter("TextoAlternativo", typeof(string));
    
            var caracteristica1Parameter = caracteristica1 != null ?
                new ObjectParameter("caracteristica1", caracteristica1) :
                new ObjectParameter("caracteristica1", typeof(string));
    
            var caracteristica2Parameter = caracteristica2 != null ?
                new ObjectParameter("caracteristica2", caracteristica2) :
                new ObjectParameter("caracteristica2", typeof(string));
    
            var caracteristica3Parameter = caracteristica3 != null ?
                new ObjectParameter("caracteristica3", caracteristica3) :
                new ObjectParameter("caracteristica3", typeof(string));
    
            var caracteristica4Parameter = caracteristica4 != null ?
                new ObjectParameter("caracteristica4", caracteristica4) :
                new ObjectParameter("caracteristica4", typeof(string));
    
            var caracteristica5Parameter = caracteristica5 != null ?
                new ObjectParameter("caracteristica5", caracteristica5) :
                new ObjectParameter("caracteristica5", typeof(string));
    
            var placaParameter = placa.HasValue ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(bool));
    
            var tituloOfertaParameter = tituloOferta != null ?
                new ObjectParameter("TituloOferta", tituloOferta) :
                new ObjectParameter("TituloOferta", typeof(string));
    
            var claseDistintaOfertaParameter = claseDistintaOferta != null ?
                new ObjectParameter("ClaseDistintaOferta", claseDistintaOferta) :
                new ObjectParameter("ClaseDistintaOferta", typeof(string));
    
            var descripcionCortaParameter = descripcionCorta != null ?
                new ObjectParameter("DescripcionCorta", descripcionCorta) :
                new ObjectParameter("DescripcionCorta", typeof(string));
    
            var descripcionLargaParameter = descripcionLarga != null ?
                new ObjectParameter("DescripcionLarga", descripcionLarga) :
                new ObjectParameter("DescripcionLarga", typeof(string));
    
            var notaParameter = nota != null ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(string));
    
            var agregarCarroParameter = agregarCarro.HasValue ?
                new ObjectParameter("agregarCarro", agregarCarro) :
                new ObjectParameter("agregarCarro", typeof(bool));
    
            var caracteristica6Parameter = caracteristica6 != null ?
                new ObjectParameter("caracteristica6", caracteristica6) :
                new ObjectParameter("caracteristica6", typeof(string));
    
            var caracteristica7Parameter = caracteristica7 != null ?
                new ObjectParameter("caracteristica7", caracteristica7) :
                new ObjectParameter("caracteristica7", typeof(string));
    
            var caracteristica8Parameter = caracteristica8 != null ?
                new ObjectParameter("caracteristica8", caracteristica8) :
                new ObjectParameter("caracteristica8", typeof(string));
    
            var porc1Parameter = porc1 != null ?
                new ObjectParameter("porc1", porc1) :
                new ObjectParameter("porc1", typeof(string));
    
            var porc2Parameter = porc2 != null ?
                new ObjectParameter("porc2", porc2) :
                new ObjectParameter("porc2", typeof(string));
    
            var porc3Parameter = porc3 != null ?
                new ObjectParameter("porc3", porc3) :
                new ObjectParameter("porc3", typeof(string));
    
            var porc4Parameter = porc4 != null ?
                new ObjectParameter("porc4", porc4) :
                new ObjectParameter("porc4", typeof(string));
    
            var idUserParameter = idUser != null ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_registroDoctor", nomDoctorParameter, dniDoctorParameter, cmpDoctorParameter, idCategoriaParameter, id_HorarioParameter, dirDoctorParameter, idDistritoParameter, telDoctorParameter, emailDoctorParameter, precioParameter, precioAnteriorParameter, imageURLParameter, textoAlternativoParameter, caracteristica1Parameter, caracteristica2Parameter, caracteristica3Parameter, caracteristica4Parameter, caracteristica5Parameter, placaParameter, tituloOfertaParameter, claseDistintaOfertaParameter, descripcionCortaParameter, descripcionLargaParameter, notaParameter, agregarCarroParameter, caracteristica6Parameter, caracteristica7Parameter, caracteristica8Parameter, porc1Parameter, porc2Parameter, porc3Parameter, porc4Parameter, idUserParameter);
        }
    
        public virtual ObjectResult<sp_reportez_Result> sp_reportez(Nullable<int> cod, Nullable<int> codb)
        {
            var codParameter = cod.HasValue ?
                new ObjectParameter("cod", cod) :
                new ObjectParameter("cod", typeof(int));
    
            var codbParameter = codb.HasValue ?
                new ObjectParameter("codb", codb) :
                new ObjectParameter("codb", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_reportez_Result>("sp_reportez", codParameter, codbParameter);
        }
    
        public virtual ObjectResult<SP_Usuario_Email_LIST_Result> SP_Usuario_Email_LIST(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Usuario_Email_LIST_Result>("SP_Usuario_Email_LIST", emailParameter);
        }
    
        public virtual ObjectResult<SP_VISITA_RECIENTE_BUSCA_Result> SP_VISITA_RECIENTE_BUSCA(Nullable<int> cliente)
        {
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITA_RECIENTE_BUSCA_Result>("SP_VISITA_RECIENTE_BUSCA", clienteParameter);
        }
    }
}
